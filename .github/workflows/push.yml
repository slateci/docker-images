name: "Build & push images"
concurrency:
  group: deploy-${{ github.repository }}

on:
  push:
    branches:
#      - stable
      - feature/43-retool-using-existing-github-marketplace-actions

env:
  PYTHON_VERSION: 3.9

jobs:
  gather:
    name: Gather Info
    runs-on: ubuntu-20.04
    outputs:
      directories: ${{ steps.set-directories.outputs.directories }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - id: build-folder-patterns
        name: Build Folder Patterns
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            with open("${{ github.workspace }}/build_folders.txt") as stream:
              try:
                build_folders = list(stream.read().splitlines())
                build_folder_patterns = [folder + '/**' for folder in build_folders]
                result = '\n'.join(build_folder_patterns)
              except Exception as ex:
                raise ex
            
            set_output('patterns', result)
            print("Found the following folders to check for modifications...")
            print(result)

      - id: changed-files
        name: Get changed directories
        uses: tj-actions/changed-files@v26.1
        with:
          dir_names: true
          files: |
            ${{ steps.build-folder-patterns.outputs.patterns }}

      - id: set-directories
        name: Set directories
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import json

            added_dirs = "${{ steps.changed-files.outputs.added_files }}".split()
            modified_dirs = "${{ steps.changed-files.outputs.modified_files }}".split()
            dirs = added_dirs + modified_dirs
            unique_dirs = [*set(dirs)]
            result = json.dumps(unique_dirs)
            
            set_output('directories', result)
            print("Found the following modified directories...")
            print(result)

  deploy:
    name: Deploy Image
    runs-on: ubuntu-20.04
    needs:
      - gather
    if: ${{ needs.gather.outputs.directories != '[]' }}

    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJson(needs.gather.outputs.directories) }}

    env:
      IMAGE_BASENAME: "hub.opensciencegrid.org/slate/${{ matrix.directory }}"
      LOCAL_IMAGE_TAG: "${{ matrix.directory }}:${{ github.sha }}"

    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: "./${{ matrix.directory }}"
          file: "./${{ matrix.directory }}/Dockerfile"
          push: false
          load: true
          tags: ${{ env.LOCAL_IMAGE_TAG }}

      - name: Lint with Dockle
        uses: hands-lab/dockle-action@v1
        with:
          image: ${{ env.LOCAL_IMAGE_TAG }}
          exit-code: '0'
          exit-level: FATAL

      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.LOCAL_IMAGE_TAG }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - id: inspect
        name: Docker inspect
        working-directory: .
        run: |-
          IMAGE_VERSION=$(docker inspect --format='{{ index .Config.Labels "org.opencontainers.image.version" }}' ${{ matrix.directory }}:${{ github.sha }})
          echo "org.opencontainers.image.version: ${IMAGE_VERSION}"
          
          IMAGE_TAGS=$(docker inspect --format='{{ index .Config.Labels "io.slateci.image.tags" }}' ${{ matrix.directory }}:${{ github.sha }})
          echo "io.slateci.image.tags: ${IMAGE_TAGS}"
          
          IMAGE_PROPOSED_TAGS="${IMAGE_VERSION} ${IMAGE_TAGS}"
          echo "Proposed image tags: '${IMAGE_PROPOSED_TAGS}'"
          echo "::set-output name=proposed-tags::${IMAGE_PROPOSED_TAGS}"

      - id: set-tags
        name: Set tags
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            proposed_image_tags = "${{ steps.inspect.outputs.proposed-tags }}".split() + ['latest']
            unique_tags = [*set(proposed_image_tags)]
            full_tags = ["${{ env.IMAGE_BASENAME }}:" + tag for tag in unique_tags]
            result = '\n'.join(full_tags)

            set_output('final-tags', result)
            print("Calculated the final image tags...")
            print(result)

      - name: Authenticate with OSG Harbor
        uses: docker/login-action@v2
        with:
          registry: hub.opensciencegrid.org
          username: "${{ secrets.OSG_HUB_USERNAME }}"
          password: "${{ secrets.OSG_HUB_ACCESS_TOKEN }}"

      - name: Build/push image
        uses: docker/build-push-action@v3
        with:
          context: "./${{ matrix.directory }}"
          file: "./${{ matrix.directory }}/Dockerfile"
          push: true
          tags: |
            ${{ steps.set-tags.outputs.final-tags }}

#  test:
#    name: Test
#    runs-on: ubuntu-20.04
#    needs:
#      - gather
#    strategy:
#      fail-fast: false
#      matrix: ${{ fromJson(needs.gather.outputs.matrix) }}
#
#  build-push:
#    name: Build/push images
#    runs-on: ubuntu-20.04
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          -
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#jobs:
#  main:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repo
#        uses: actions/checkout@v3
#
#      - name: Authenticate with OSG Hub
#        run: echo '${{ secrets.OSG_HUB_ACCESS_TOKEN }}' | docker login https://hub.opensciencegrid.org -u '${{ secrets.OSG_HUB_USERNAME }}' --password-stdin
#
#      - name: Install dockle
#        shell: bash
#        run: |
#          VERSION=$(
#           curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
#           grep '"tag_name":' | \
#           sed -E 's/.*"v([^"]+)".*/\1/' \
#          ) && curl -L -o dockle.deb https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.deb
#          sudo dpkg -i dockle.deb && rm dockle.deb
#
#      - name: Install trivy
#        run: |
#          sudo apt-get install wget apt-transport-https gnupg lsb-release
#          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
#          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
#          sudo apt-get update
#          sudo apt-get install trivy
#
#      - name: Install hadolint
#        run: |
#          mkdir -p $GITHUB_WORKSPACE/bin
#          curl -L https://github.com/hadolint/hadolint/releases/download/v2.3.0/hadolint-Linux-x86_64 --output $GITHUB_WORKSPACE/bin/hadolint
#          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
#          chmod +x $GITHUB_WORKSPACE/bin/hadolint
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      # - name: Install script dependencies
#      #   run: pip3 install pyyaml
#
#      - name: Run build.py
#        run: |
#          ./build.py pipeline ${{ github.event.before }} ${{ github.event.after }} \
#          --check-existence 'hub.opensciencegrid.org/slate/{name}:{version}' \
#          --push-tags 'hub.opensciencegrid.org/slate/{name}:{version}'  'hub.opensciencegrid.org/slate/{name}:{tags[]}'
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          GITHUB_COMPARE_ENDPOINT: ${{ github.event.repository.compare_url }}
#
#      - name: Notify Slack of Failure
#        if: failure()
#        env:
#          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
#        uses: voxmedia/github-action-slack-notify-build@v1
#        with:
#          channel: github-actions
#          status: FAILED
#          color: danger
